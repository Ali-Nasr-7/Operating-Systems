#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>

#define MAX_INPUT_LENGTH 1024
#define MAX_ARGS 100

// Function prototypes
void handle_cd(char *path);
void handle_dir(char *dir);
void handle_environ();
void handle_set(char *variable, char *value);
void handle_echo(char *comment);
void handle_help();
void handle_pause();
void handle_quit();
void execute_command(char **args, int background, char *input_file, char *output_file);
void parse_and_execute(char *input_line);
void redirect_io(char *input_file, char *output_file);
void run_batch_file(char *filename);
void print_prompt();
void trim_newline(char *str);

int main(int argc, char *argv[]) {
    if (argc == 2) {
        run_batch_file(argv[1]);  
    } else {
        while (1) {
            print_prompt();
            char input_line[MAX_INPUT_LENGTH];
            if (fgets(input_line, sizeof(input_line), stdin) != NULL) {
                trim_newline(input_line);  /
                parse_and_execute(input_line);
            }
        }
    }
    return 0;
}

void print_prompt() {
    char cwd[1024];
    if (getcwd(cwd, sizeof(cwd)) != NULL) {
        printf("%s$ ", cwd);
    }
}

void trim_newline(char *str) {
    str[strcspn(str, "\n")] = '\0';  
}

void run_batch_file(char *filename) {
    FILE *file = fopen(filename, "r");
    if (!file) {
        perror("Error opening batch file");
        return;
    }

    char line[MAX_INPUT_LENGTH];
    while (fgets(line, sizeof(line), file) != NULL) {
        trim_newline(line);
        parse_and_execute(line);
    }

    fclose(file);
}

void parse_and_execute(char *input_line) {
    char *args[MAX_ARGS];
    char *input_file = NULL;
    char *output_file = NULL;
    int background = 0;
    int i = 0;

    // Tokenize input into arguments
    char *token = strtok(input_line, " ");
    while (token != NULL) {
        if (strcmp(token, "<") == 0) {
            input_file = strtok(NULL, " ");
        } else if (strcmp(token, ">") == 0) {
            output_file = strtok(NULL, " ");
        } else if (strcmp(token, ">>") == 0) {
            output_file = strtok(NULL, " ");
        } else if (strcmp(token, "&") == 0) {
            background = 1;
        } else {
            args[i++] = token;
        }
        token = strtok(NULL, " ");
    }
    args[i] = NULL;  // Null-terminate the arguments array

    // Handle internal commands
    if (args[0] == NULL) return;  

    if (strcmp(args[0], "cd") == 0) {
        if (args[1] == NULL) {
            handle_cd(NULL);
        } else {
            handle_cd(args[1]);
        }
    } else if (strcmp(args[0], "dir") == 0) {
        if (args[1] != NULL) {
            handle_dir(args[1]);
        }
    } else if (strcmp(args[0], "environ") == 0) {
        handle_environ();
    } else if (strcmp(args[0], "set") == 0) {
        if (args[1] != NULL && args[2] != NULL) {
            handle_set(args[1], args[2]);
        }
    } else if (strcmp(args[0], "echo") == 0) {
        handle_echo(input_line + 5); 
    } else if (strcmp(args[0], "help") == 0) {
        handle_help();
    } else if (strcmp(args[0], "pause") == 0) {
        handle_pause();
    } else if (strcmp(args[0], "quit") == 0) {
        handle_quit();
    } else {
        execute_command(args, background, input_file, output_file);
    }
}

void handle_cd(char *path) {
    if (path == NULL) {
        char *pwd = getenv("PWD");
        if (pwd) {
            printf("%s\n", pwd);
        } else {
            printf("PWD not set\n");
        }
    } else if (chdir(path) == 0) {
        setenv("PWD", getcwd(NULL, 0), 1);
    } else {
        perror("cd");
    }
}

void handle_dir(char *dir) {
    if (dir == NULL) {
        dir = ".";
    }
    // List the contents of the directory
    char command[MAX_INPUT_LENGTH];
    snprintf(command, sizeof(command), "ls %s", dir);
    system(command);
}

void handle_environ() {
    extern char **environ;
    for (int i = 0; environ[i]; i++) {
        printf("%s\n", environ[i]);
    }
}

void handle_set(char *variable, char *value) {
    setenv(variable, value, 1);
}

void handle_echo(char *comment) {
    printf("%s\n", comment);
}

void handle_help() {
    printf("Simple shell\n");
    printf("Commands:\n");
    printf("cd [DIRECTORY]     - Change current directory\n");
    printf("dir DIRECTORY      - List directory contents\n");
    printf("environ            - List environment variables\n");
    printf("set VARIABLE VALUE - Set environment variable\n");
    printf("echo COMMENT       - Print COMMENT\n");
    printf("help               - Show help\n");
    printf("pause              - Pause shell execution\n");
    printf("quit               - Exit shell\n");
}

void handle_pause() {
    printf("Press 'Enter' to continue...");
    getchar();
}

void handle_quit() {
    exit(0);
}

void execute_command(char **args, int background, char *input_file, char *output_file) {
    pid_t pid = fork();
    if (pid == 0) {
       
        redirect_io(input_file, output_file);

        
        if (execvp(args[0], args) == -1) {
            perror("execvp");
        }
        exit(EXIT_FAILURE);
    } else if (pid > 0) {
        if (!background) {
            waitpid(pid, NULL, 0);  
        }
    } else {
        perror("fork");
    }
}

void redirect_io(char *input_file, char *output_file) {
    if (input_file) {
        int input_fd = open(input_file, O_RDONLY);
        if (input_fd == -1) {
            perror("open input file");
            exit(EXIT_FAILURE);
        }
        dup2(input_fd, STDIN_FILENO);  
        close(input_fd);
    }

    if (output_file) {
        int output_fd = open(output_file, O_WRONLY | O_CREAT | O_TRUNC, 0644);
        if (output_fd == -1) {
            perror("open output file");
            exit(EXIT_FAILURE);
        }
        dup2(output_fd, STDOUT_FILENO);  
        close(output_fd);
    }
}

