#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_DOMAINS 100
#define MAX_OBJECTS 100

typedef struct {
    int read;
    int write;
    int execute;
} AccessRights;

typedef struct {
    int domainID;
    AccessRights rights;
} ACL_Entry;

typedef struct {
    int objectID;
    ACL_Entry* aclEntries[MAX_DOMAINS];
    int aclCount;
} Object;

Object* objects[MAX_OBJECTS];
int objectCount = 0;

int domains[MAX_DOMAINS];
int domainCount = 0;

void createObject(int objectID) {
    Object* obj = (Object*)malloc(sizeof(Object));
    obj->objectID = objectID;
    obj->aclCount = 0;
    objects[objectCount++] = obj;
    printf("Object %d created.\n", objectID);
}

void deleteObject(int objectID) {
    for (int i = 0; i < objectCount; i++) {
        if (objects[i]->objectID == objectID) {
            for (int j = 0; j < objects[i]->aclCount; j++) {
                free(objects[i]->aclEntries[j]);
            }
            free(objects[i]);
            for (int j = i; j < objectCount - 1; j++)
                objects[j] = objects[j + 1];
            objectCount--;
            printf("Object %d deleted.\n", objectID);
            return;
        }
    }
}

void createDomain(int domainID) {
    domains[domainCount++] = domainID;
    printf("Domain %d created.\n", domainID);
}

void deleteDomain(int domainID) {
    int found = 0;
    for (int i = 0; i < domainCount; i++) {
        if (domains[i] == domainID) {
            found = 1;
            for (int j = i; j < domainCount - 1; j++)
                domains[j] = domains[j + 1];
            domainCount--;
            break;
        }
    }

    if (found) {
        for (int i = 0; i < objectCount; i++) {
            Object* obj = objects[i];
            for (int j = 0; j < obj->aclCount; j++) {
                if (obj->aclEntries[j]->domainID == domainID) {
                    free(obj->aclEntries[j]);
                    for (int k = j; k < obj->aclCount - 1; k++)
                        obj->aclEntries[k] = obj->aclEntries[k + 1];
                    obj->aclCount--;
                    j--; // Re-check new j
                }
            }
        }
        printf("Domain %d deleted.\n", domainID);
    }
}

void grantAccess(int objectID, int domainID, int r, int w, int x) {
    for (int i = 0; i < objectCount; i++) {
        if (objects[i]->objectID == objectID) {
            Object* obj = objects[i];
            for (int j = 0; j < obj->aclCount; j++) {
                if (obj->aclEntries[j]->domainID == domainID) {
                    obj->aclEntries[j]->rights.read = r;
                    obj->aclEntries[j]->rights.write = w;
                    obj->aclEntries[j]->rights.execute = x;
                    printf("Access updated for domain %d on object %d.\n", domainID, objectID);
                    return;
                }
            }
            ACL_Entry* entry = (ACL_Entry*)malloc(sizeof(ACL_Entry));
            entry->domainID = domainID;
            entry->rights.read = r;
            entry->rights.write = w;
            entry->rights.execute = x;
            obj->aclEntries[obj->aclCount++] = entry;
            printf("Access granted for domain %d on object %d.\n", domainID, objectID);
            return;
        }
    }
}

void revokeAccess(int objectID, int domainID) {
    for (int i = 0; i < objectCount; i++) {
        if (objects[i]->objectID == objectID) {
            Object* obj = objects[i];
            for (int j = 0; j < obj->aclCount; j++) {
                if (obj->aclEntries[j]->domainID == domainID) {
                    free(obj->aclEntries[j]);
                    for (int k = j; k < obj->aclCount - 1; k++)
                        obj->aclEntries[k] = obj->aclEntries[k + 1];
                    obj->aclCount--;
                    printf("Access revoked for domain %d on object %d.\n", domainID, objectID);
                    return;
                }
            }
        }
    }
}

void printACLs() {
    for (int i = 0; i < objectCount; i++) {
        Object* obj = objects[i];
        printf("Object %d:\n", obj->objectID);
        for (int j = 0; j < obj->aclCount; j++) {
            ACL_Entry* entry = obj->aclEntries[j];
            printf("  Domain %d => R:%d W:%d X:%d\n",
                entry->domainID, entry->rights.read,
                entry->rights.write, entry->rights.execute);
        }
    }
}


int main() {
    createDomain(1);
    createDomain(2);
    createObject(100);
    createObject(101);
    grantAccess(100, 1, 1, 0, 1);
    grantAccess(101, 2, 1, 1, 1);
    printACLs();
    revokeAccess(100, 1);
    deleteObject(101);
    deleteDomain(2);
    printACLs();
    return 0;
}
